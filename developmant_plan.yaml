phases:
  - name: "Phase 1: 開発環境構築"
    steps:
      - "【Step 1-1】Python 3.11 のインストール確認 (必須)  
         - 参照箇所: 『技術要件定義書』 > 1. Python 3.11 / FastAPI  
         - Windows の場合: Microsoft Store や公式サイトからダウンロード  
           - 例: https://www.python.org/downloads/  
           - 環境変数 PATH に追加  
         - Mac の場合: Homebrew (brew install python@3.11) など  
         - Linux の場合: apt や yum などディストリビューションに合わせてインストール  
         - バージョン確認: python --version で 3.11 系が正しく導入されているか確認  
         - もし複数バージョンの Python を共存させる場合は pyenv などのバージョン管理ツール使用可"
      - "【Step 1-2】仮想環境(venv)の作成と有効化  
         - 参照箇所: 『技術要件定義書』 全体 (Python 関連)  
         - プロジェクトルート(例: /app) ディレクトリで実行:  
           1) python -m venv venv  
           2) Windows: venv\\Scripts\\activate  
              Mac/Linux/WSL: source venv/bin/activate  
         - 仮想環境が有効になったら、(venv) が表示されるか確認"
      - "【Step 1-3】依存ライブラリのインストール  
         - 参照箇所: 『技術要件定義書』 > requirements.txt, app/src/utils/xml_parser.py, など  
         - コマンド例: pip install -r requirements.txt  
         - 必要ライブラリ (一例):  
           - fastapi, uvicorn, requests, xmltodict, pytest, etc.  
         - バージョンを固定するため、 pip freeze > requirements.txt で最新依存を再出力し管理"
      - "【Step 1-4】Docker インストール確認  
         - 参照箇所: 『技術要件定義書』 > 5. Docker / AWS CodePipeline / AWS App Runner / AWS CDK (Python)  
         - docker --version, docker-compose --version でバージョン確認  
         - Windows の場合は Docker Desktop, WSL2 連携を有効にする  
         - Mac の場合は Docker Desktop または colima なども考慮可  
         - Linux の場合は公式リポジトリからインストールし、sudo groupadd docker && sudo usermod -aG docker $USER なども適宜実施"
      - "【Step 1-5】(必要に応じて) Node.js のインストール・確認  
         - 参照箇所: 『技術要件定義書』ではフロントエンドフレームワークの記述はなし (FastAPI ベース)  
         - フロントが不要ならスキップ可。もし将来的に Next.js 等を導入する際は node -v, npm -v を確認し nvm などでバージョン管理"
      - "【Step 1-6】GitHub リポジトリのクローン & ディレクトリ構成確認  
         - 参照箇所: 『技術要件定義書』 > ディレクトリ構成  
         - git clone <REPO_URL> でソース取得  
         - 取得後、以下のフォルダ構成を必ず確認:  
           app/src, app/tests, app/config, prompt/, cdk/, Dockerfile, requirements.txt, etc.  
         - technical_requirements.md が含まれているかも確認"
      - "【Step 1-7】(test_phase1.md) テスト実行と初期動作確認  
         - 参照箇所: 『技術要件定義書』 > 9. app/tests/  
         - シェルコマンド例:  
           1) pytest --maxfail=1 --disable-warnings -q  
           2) 成功した場合は“OK”が表示される。依存欠如や設定漏れが無いか確認  
         - 上記テストの手順や結果を test_phase1.md に記載しておく"
  - name: "Phase 2: アプリケーション実装 (FastAPI) & ローカル動作確認"
    steps:
      - "【Step 2-1】FastAPI エントリーポイント(main.py)の確認  
         - 参照箇所: 『技術要件定義書』 > 1. app/src/main.py  
         - main.py が FastAPI インスタンスを生成し、fortune_router を include しているか確認  
         - ルートが /fortune でエンドポイントが待ち受け可能かなどチェック"
      - "【Step 2-2】占いルーター (fortune_router.py) 実装  
         - 参照箇所: 『技術要件定義書』 > 2. app/src/routers/fortune_router.py  
         - POST /fortune で JSON を受け取り、 fortune_service へ処理委譲する仕組みを実装  
         - request_models.py (FortuneRequest) でバリデーションを行う場合は適宜使用"
      - "【Step 2-3】services 実装 (fortune_service.py, llm_service.py, logic_service.py, viewdata_service.py)  
         - 参照箇所: 『技術要件定義書』 > 3, 4, 5, 6. services  
         - fortune_service.py: 占いのメインフロー (1)閲覧データ取得→(2)占い項目生成→(3)ロジックサーバー(XML)取得→(4)LLM回答→(5)要約→(6)レスポンス  
         - llm_service.py: prompt/*.txt を読み込んで LLM に問い合わせる  
         - logic_service.py: ロジックサーバーから XML を取得  
         - viewdata_service.py: 閲覧データが必要な場合に外部サーバーと連携(必要に応じて)"
      - "【Step 2-4】utils 実装 (xml_parser.py)  
         - 参照箇所: 『技術要件定義書』 > 7. app/src/utils/xml_parser.py  
         - XML 文字コード (Windows-31J 等) に注意しながら、ElementTree / xmltodict でパース  
         - ghost ID や text1 など必要な要素を取得するロジックを作成"
      - "【Step 2-5】config/settings.py, .env ファイルによる設定  
         - 参照箇所: 『技術要件定義書』 > 10. app/config/settings.py  
         - development.env / production.env を用意し、API_KEY, LOGIC_SERVER_URL, など必要な環境変数を設定  
         - Python で os.getenv() などを用いて読み込む実装を確認"
      - "【Step 2-6】prompt/*.txt の作成  
         - 参照箇所: 『技術要件定義書』 > 11～13. ghost1_prompt.txt, fortune_item_prompt.txt, summary_prompt.txt  
         - ghost1～5_prompt.txt: 各 ghost ID 向けの回答を生成できるように文章を定義  
         - fortune_item_prompt.txt: 閲覧履歴をもとに占い項目(6個)を生成するプロンプト  
         - summary_prompt.txt: 回答(answer) を短く要約するプロンプト  
         - llm_service.py から読み込めるようファイルパスを整合させる"
      - "【Step 2-7】ローカルサーバー起動・動作確認  
         - 参照箇所: 『技術要件定義書』 > 1. app/src/main.py の起動例  
         - シェルコマンド例: uvicorn app.src.main:app --host 0.0.0.0 --port 8080 --reload  
         - ブラウザで http://127.0.0.1:8080/docs へアクセスし、Swagger UI から /fortune にリクエスト  
         - エラーや 404 が無いかを確認"
      - "【Step 2-8】(test_phase2.md) ユニットテスト & 統合テスト実行  
         - 参照箇所: 『技術要件定義書』 > 9. app/tests/ 下に test_main.py, test_fortune_router.py 等あり  
         - コマンド例: pytest --maxfail=1 --disable-warnings -v  
         - 主要テスト:  
           - test_main.py: FastAPI アプリの起動テスト  
           - test_fortune_router.py: /fortune エンドポイントの入出力確認  
           - test_llm_service.py, test_logic_service.py: LLM や XML ロジックの単体テスト  
         - テスト結果・考察を test_phase2.md に整理"
  - name: "Phase 3: Docker ビルド & コンテナ動作確認"
    steps:
      - "【Step 3-1】Dockerfile の確認  
         - 参照箇所: 『技術要件定義書』 > 18. Dockerfile  
         - python:3.11 ベースイメージかを確認  
         - requirements.txt をコピー → pip install -r requirements.txt → ソースコピー → CMD [\"uvicorn\", ...] の順で記述されているか確認"
      - "【Step 3-2】Docker イメージのビルド  
         - コマンド例: docker build -t my-fortune-app:latest .  
         - ビルドが成功し、イメージが正しく作成されたか docker images で確認"
      - "【Step 3-3】コンテナ起動・動作確認  
         - コマンド例: docker run -d -p 8080:8080 --name fortune_app my-fortune-app:latest  
         - ブラウザで http://127.0.0.1:8080/docs にアクセスし、コンテナ上で動く FastAPI の挙動を確認"
      - "【Step 3-4】docker-compose の使用 (必要に応じて)  
         - 参照箇所: 『技術要件定義書』 > 5. Docker … CodePipeline / App Runner  
         - もし複数コンテナ (DB, Redis 等) と連携する場合 docker-compose.yml を用意  
         - docker-compose up --build などで起動し、まとめてテストする"
      - "【Step 3-5】(test_phase3.md) コンテナ上でのテスト実行  
         - 参照箇所: 『技術要件定義書』 > 9. app/tests/  
         - docker exec -it fortune_app pytest --maxfail=1 --disable-warnings -v などでテスト可能  
         - test_phase3.md にテスト結果をまとめる"
  - name: "Phase 4: CI/CD (AWS CodePipeline / AWS App Runner / AWS CDK) 構築"
    steps:
      - "【Step 4-1】AWS CDK のセットアップ  
         - 参照箇所: 『技術要件定義書』 > 5, 14～17. cdk 関連  
         - cdk/requirements.txt に記載のライブラリ (aws-cdk-lib 等) をインストール  
           コマンド例: pip install -r cdk/requirements.txt  
         - cdk.json (cdk/cdk.json) でアプリエントリーポイント (app) や context を確認"
      - "【Step 4-2】AppRunnerStack (app_runner_stack.py) の確認  
         - 参照箇所: 『技術要件定義書』 > 14. cdk/app_runner_stack.py  
         - ECR リポジトリ作成 → App Runner サービス定義  
         - ポート 8080, IAM ロール設定, 環境変数 (production.env / development.env) 対応など  
         - LLM (AWS Bedrock) へのアクセスロールが必要な場合は付与"
      - "【Step 4-3】PipelineStack (pipeline_stack.py) の確認  
         - 参照箇所: 『技術要件定義書』 > 15. cdk/pipeline_stack.py  
         - ソースステージ: GitHub 連携 (main ブランチ監視など)  
         - ビルドステージ: Docker イメージビルド & ECR プッシュ  
           - buildspec.yml 相当で docker build/push を定義  
         - デプロイステージ: App Runner のイメージ更新  
         - development.env, production.env 切り替えは CodeBuild or CDKContext などで制御"
      - "【Step 4-4】CodePipeline 初回デプロイ  
         - cdk bootstrap (必要に応じて)  
         - cdk deploy PipelineStack (例)  
         - 成功後、AWS コンソールの CodePipeline でパイプラインが作成されているか確認"
      - "【Step 4-5】App Runner サービス確認  
         - CodePipeline デプロイ完了後、AWS App Runner にてコンテナが起動しているか  
         - App Runner の URL (xxxx.awsapprunner.com) にアクセスし、/fortune の疎通を確認  
         - ログにエラーが出ていないか (LLM API キーやロジックサーバー URL が正しいか) チェック"
      - "【Step 4-6】(test_phase4.md) CI/CD パイプライン上のテスト結果確認  
         - パイプライン実行時に CodeBuild 上で pytest を実行する設定を入れている場合、buildログを確認  
         - ここまでのユニットテスト・コンテナテスト・デプロイ後の簡易統合テスト結果を test_phase4.md に記録"
  - name: "Phase 5: 機能追加・改善 (LLM 切り替え等) / 運用"
    steps:
      - "【Step 5-1】LLM サービス抽象化  
         - 参照箇所: 『技術要件定義書』 > 2. LLM 呼び出し (AWS Bedrock Claude3.5 Sonnet 想定)  
         - openai_api_service.py など別実装ファイルを用意し、AWS Bedrock 以外にも差し替えられる構造を検討"
      - "【Step 5-2】XML パースの例外処理・マルチ ghost 対応強化  
         - 参照箇所: 『技術要件定義書』 > 3. ロジックサーバーとの連携 (XML 形式) & ghost と text1 の対応  
         - ghost の数が 6 個に満たない / 超過する場合、エラーやリカバリーロジックを実装  
         - text2, text3 などの要素が出るケースにも柔軟に対応"
      - "【Step 5-3】モニタリング & ロギング強化  
         - 参照箇所: 『技術要件定義書』 全般  
         - CloudWatch Logs, X-Ray, App Runner のログ等を活用し、エラーを可視化  
         - LLM 応答が想定外の場合の検知やリトライも考慮"
      - "【Step 5-4】(test_phase5.md) 回帰テスト / 負荷テスト  
         - 新機能追加後の回帰テスト、CI で自動化  
         - アクセス負荷に対応できるか検証し、App Runner のオートスケーリング設定を見直す  
         - test_phase5.md で結果まとめ"
  - name: "Phase 6: 本番リリース & 継続的改善"
    steps:
      - "【Step 6-1】最終リリース判定  
         - 参照箇所: 『技術要件定義書』 全内容  
         - 要求仕様 (占いAPI, ghost, text1, 要約, JSONレスポンス 6個 etc.) が満たされているか検証  
         - 実装漏れがないか、実装者逮捕のリスクがないかダブルチェック"
      - "【Step 6-2】production.env の最終チェック  
         - LLMアクセスキー, ロジックサーバーURL, 閲覧データサーバーURL, など本番用の値を設定  
         - Secrets Manager / SSM パラメータストアで管理する場合は紐付けが正しいか確認"
      - "【Step 6-3】本番環境へのデプロイ実施  
         - GitHub main ブランチへの push をトリガーに CodePipeline → App Runner デプロイ  
         - 正常稼働を確認し、APIテストやエンドユーザテストを実施"
      - "【Step 6-4】運用監視 & 継続的改善  
         - LLM モデル精度や ghost/text1 生成の品質向上などフィードバックを受けて更新  
         - バージョンタグをつけてリリース管理  
         - 定期的に依存パッケージ更新とセキュリティパッチ適用  
         - さらに拡張する場合は、この開発計画を適宜改訂"
