phases:
  - name: "フェーズ1: 開発環境の準備・ディレクトリ確認"
    steps:
      - "【technical_specifications.mdの参照】まずは『## 目的』と『## ディレクトリ構成』を読み、システムの全体像を把握してください。FastAPI (Python3.11) や Docker, AWS CDK を使うことが明記されているため、事前にローカル環境に Python3.11, Docker, AWS CLI, CDK等をインストールします。"
      - "【作業】ディレクトリが technical_specifications.md の『## ディレクトリ構成』に従って存在するか確認してください（app, prompt, cdk など）。無い場合は、指示通りにディレクトリを作成します。"
      - "【作業】環境変数ファイル (development.env, production.env) は app/config 下にあるか確認します。存在しない場合は空ファイルとして作成し、値の詳細は後から埋める方針とします。"
      - "【テスト方針】まだアプリ実装前のため Shell 実行によるテストは行いません。このフェーズでは構成確認のみです。"

  - name: "フェーズ2: モックデータの先行作成 & テストファイル雛形準備"
    steps:
      - "【technical_specifications.mdの参照】『## ファイル概要と役割・処理内容・依存関係』のうち、特に『### 2. app/src/routers/fortune_router.py』, 『### 3. app/src/services/fortune_service.py』 などで使用されるデータ構造 (birth, date, history) を確認します。"
      - "【作業】app/mock_data/ というディレクトリを新たに作成し (※仕様には記載がないがモックデータ格納用として便宜上追加)、そこに test_request.json (例) を作成し、以下のJSONを記入してください。内容は technical_specifications.md 『## 処理ロジック詳細』→『1. リクエスト受信』で示されているサンプルを流用:\
```json\
{\
  \"birth\": \"19990101\",\
  \"date\": \"20250109\",\
  \"history\": [\
    {\
      \"category\": \"誕生日が分からないあの人との恋\",\
      \"title\": \"友達だけど、少しでも異性を意識してくれてる？\"\
    }\
  ]\
}\
```"
      - "【作業】上記データを送信するためのテストファイル雛形として test_request_command.sh を作成します。内容は以下の通り (curlコマンドでモックデータを送信する想定、実行時はサーバー起動済みを仮定):\
```bash\
#!/bin/bash\
curl -X POST -H \"Content-Type: application/json\" \\
  -d @app/mock_data/test_request.json \\
  http://localhost:8080/fortune\
```"
      - "【テスト】まだAPIは未実装なのでこの段階で実行してもエラーが出ますが、ファイルの存在確認と実行権限のみチェックします。コマンド例:\
```bash\
chmod +x test_request_command.sh\
./test_request_command.sh > test_results_phase2.log 2>&1 || true \
```\
結果は test_results_phase2.log に出力し、想定通りエラーが出ることを確認してください。"
      - "【注意】technical_specifications.md の『### 9. app/tests/』にはpytest等の説明があるが、本計画ではShellコマンドを主体としたテストで進めるため、pytestは用いません。"

  - name: "フェーズ3: ロジックサーバー連携部 (logic_service, xml_parser) の実装とテスト"
    steps:
      - "【technical_specifications.mdの参照】『### 5. app/src/services/logic_service.py』, 『### 7. app/src/utils/xml_parser.py』を確認し、何を実装すべきか把握します。XML取得→パース→必要なタグを抽出する流れが書かれています。"
      - "【作業】app/src/utils/xml_parser.py を作成します。technical_specifications.md 『### 7. app/src/utils/xml_parser.py』を参考に、標準ライブラリ(xml.etree.ElementTree) 等を用いて、<explanation id='ghost'>,<explanation id='text1'>を抽出する関数 parse_xml を定義してください。"
      - "【テスト】まずファイル作成直後に以下コマンドを実行し、構文エラーがないかチェックします。\
```bash\
python -m py_compile app/src/utils/xml_parser.py || echo \"Error in xml_parser.py\"\
```\
出力結果を test_results_phase3.log にリダイレクトして確認し、エラーがなければOKとします。"
      - "【作業】app/src/services/logic_service.py を作成します。technical_specifications.md 『### 5. app/src/services/logic_service.py』を参照し、(1) ロジックサーバーのURLに birth, date をクエリパラメータとして付与 (具体URLは未定だが実装者が後で設定) し、(2) 取得したXMLを xml_parser.py に渡して結果を返す関数 fetch_and_parse_xml を定義します。"
      - "【テスト】ロジックサーバー自体はまだ存在しないとして、ダミーのXMLファイルを用意して内部的に読み込む形でテストします。例: app/mock_data/mock_logic.xml を作成し、technical_specifications.md 『### 3. ロジックサーバー (XML) 取得例』の一部をコピペしておきます。\
```xml\
<?xml version=\"1.0\" encoding=\"Windows-31J\"?>\
<uranai>\
  <content>\
    <explanation id='ghost'>4</explanation>\
    <explanation id='text1'>menu[1]-id[9]-text1</explanation>\
  </content>\
</uranai>\
```\
logic_service.py 内部で requests.get ではなく一時的に open などでこのXMLファイルを読み込むように変更して動作テストを行います。"
      - "【テストコマンド例】\
```bash\
python -c 'import app.src.services.logic_service as ls; print(ls.fetch_and_parse_xml(\"19990101\", \"20250109\"))' \
```\
実行結果を test_results_phase3.log に追記し、<explanation id='ghost'> や <explanation id='text1'> が抽出できているか確認します。NGの場合は修正→再テスト→OKなら次ステップ。"

  - name: "フェーズ4: LLM呼び出し (llm_service) の下準備とテスト"
    steps:
      - "【technical_specifications.mdの参照】『### 4. app/src/services/llm_service.py』を確認します。AWS Bedrock やClaude3.5 Sonnetを想定するが、本実装では外部呼び出し部分は未定義でOK。モックとしてテキストファイルを読み込み→ダミーのJSONを返却する仕組みをまず整えます。"
      - "【作業】app/src/services/llm_service.py を新規作成し、以下の関数を定義します。\
(1) generate_fortune_items(...) : prompt/fortune_item_prompt.txt を読み込み、ダミーで6個のfortune_itemsリストを返す\
(2) generate_answers(...) : ghost1_prompt.txt 等を参照し、ダミーで回答を返す\
(3) generate_summary(...) : summary_prompt.txt を参照し、要約を返す\
この時点では、LLMへの実際のリクエストは行わず、固定のJSONやランダム文字列を返却してください。"
      - "【テストファイル作成】llm_service_test_command.sh を作り、以下のように実行します。\
```bash\
#!/bin/bash\
python -c \"import app.src.services.llm_service as l; print(l.generate_fortune_items({'history':[]}))\" > test_results_phase4.log 2>&1\
python -c \"import app.src.services.llm_service as l; print(l.generate_answers([{'ghost_id':1, 'fortune_items':'...'}]))\" >> test_results_phase4.log 2>&1\
python -c \"import app.src.services.llm_service as l; print(l.generate_summary([{'ghost_id':1, 'answer':'外食がいいですよ'}]))\" >> test_results_phase4.log 2>&1\
```\
これにより3つの関数の呼び出し結果が test_results_phase4.log に書き込まれます。確認し、問題なければOK。"
      - "【注意】『### 6. prompt ディレクトリ』に ghost1_prompt.txt などが存在しない場合は空ファイルを作成し、後で本番プロンプトを記述します。technical_specifications.md『### 11.～13.』を参照。"

  - name: "フェーズ5: 占いロジック (fortune_service) 実装と1ファイルごとのテスト"
    steps:
      - "【technical_specifications.mdの参照】『### 3. app/src/services/fortune_service.py』に詳細なフローがあります。(2) 閲覧データから占い項目の生成 → (3) ロジックサーバーXML取得 → (4) 回答生成 → (5) 要約生成 → (6) レスポンス返却の流れ。"
      - "【作業】app/src/services/fortune_service.py を新規作成し、以下の関数を定義:\
(1) run_fortune_flow(fortune_request: dict) → List[dict]: 引数(例: {'birth':..., 'date':..., 'history':[...]})を受け取り、llm_serviceやlogic_serviceを順に呼び出す。\
(2) 返り値は6要素のJSONリスト(ghost_id, summary, answer含む)とする。"
      - "【テスト (ファイル作成直後)】\
```bash\
python -m py_compile app/src/services/fortune_service.py || echo \"Error in fortune_service.py\" \
```\
出力を test_results_phase5.log にリダイレクトし、エラーがないか確認。問題なければ次へ。"
      - "【テスト (ロジック挙動確認)】\
```bash\
python -c 'import app.src.services.fortune_service as fs; \\
req = {\"birth\":\"19990101\",\"date\":\"20250109\",\"history\":[{\"category\":\"X\",\"title\":\"Y\"}]}; \\
print(fs.run_fortune_flow(req))' \
```\
結果を test_results_phase5.log に追記して確認します。ここで6個の回答+要約がダミーでも返ってくればOK。NGなら修正後に再テスト。"
      - "【注意】ロジック内で llm_service, logic_service を呼び出す際、technical_specifications.md の『### 3. 処理フロー』を必ず参照し、(2)→(3)→(4)→(5)の順序を保ってください。"

  - name: "フェーズ6: ルーター (fortune_router) 実装および POSTテスト"
    steps:
      - "【technical_specifications.mdの参照】『### 2. app/src/routers/fortune_router.py』には、@router.post(\"/fortune\") で JSONを受け取るイメージが示されています。"
      - "【作業】app/src/routers/fortune_router.py を作成し、FastAPIのAPIRouterを用いて /fortune を定義します。受け取ったリクエストを fortune_service.run_fortune_flow に渡し、その結果を return する形式とします。"
      - "【テスト (構文チェック)】\
```bash\
python -m py_compile app/src/routers/fortune_router.py || echo \"Error in fortune_router.py\" \
```\
結果は test_results_phase6.log に追記します。"
      - "【テスト (APIエンドポイント起動)】 main.py がまだ未定義の場合は仮で app/src/main.py を作成し、FastAPIインスタンスに fortune_router を include するだけのコードを書きます (technical_specifications.md『### 1. app/src/main.py』参照)。\
```bash\
touch app/src/main.py\
echo \"from fastapi import FastAPI\\nfrom app.src.routers.fortune_router import router\\napp = FastAPI()\\napp.include_router(router)\\n\" > app/src/main.py\
```"
      - "【テスト (サーバー起動)】\
```bash\
python -c 'import uvicorn; uvicorn.run(\"app.src.main:app\", host=\"0.0.0.0\", port=8080)' &
sleep 2
```\
バックグラウンドでサーバー起動後、先のフェーズ2で作成した test_request_command.sh を実行し、\
```bash\
./test_request_command.sh >> test_results_phase6.log 2>&1\
```\
レスポンスが 6要素の占い回答+要約のJSONで返ってくるか確認します。NGなら修正。OKなら次へ。"

  - name: "フェーズ7: Dockerfile の実装とコンテナ起動テスト"
    steps:
      - "【technical_specifications.mdの参照】『### 18. Dockerfile』に書かれている手順を確認します。python:3.11ベース→requirements.txtインストール→ソースコードコピー→uvicorn起動が概要です。"
      - "【作業】リポジトリ直下に Dockerfile を作成し、technical_specifications.md『### 18. Dockerfile』通りに記述します。requirements.txt は technical_specifications.md『### 19. requirements.txt』のライブラリを事前にコピーします。"
      - "【テスト】以下コマンドでDockerイメージをビルド、コンテナ起動し、ローカルでcurlテストします。\
```bash\
docker build -t fortune-api:local . >> test_results_phase7.log 2>&1 || echo \"Docker build error\"\
docker run -d -p 8080:8080 --name fortune-api-local fortune-api:local >> test_results_phase7.log 2>&1\
sleep 3\
curl -X POST -H \"Content-Type: application/json\" -d @app/mock_data/test_request.json http://localhost:8080/fortune >> test_results_phase7.log 2>&1\
```\
test_results_phase7.log を確認し、想定のJSONが返ればOK。"
      - "【後処理】テスト終了後、\
```bash\
docker stop fortune-api-local && docker rm fortune-api-local\
```\
でコンテナを停止・削除します。"

  - name: "フェーズ8: AWS CDK (app_runner_stack, pipeline_stack) 実装と最終統合テスト"
    steps:
      - "【technical_specifications.mdの参照】『### 14. cdk/app_runner_stack.py』, 『### 15. cdk/pipeline_stack.py』の手順が詳しいです。ECRリポジトリ作成→App Runnerサービス作成→CodePipeline構築→GitHub連携→ビルド→デプロイの順序が書かれています。"
      - "【作業】cdk/app_runner_stack.py を作成し、technical_specifications.md『### 14.』を参考にECRとApp Runnerを定義します。ポート8080で起動することを忘れないでください。"
      - "【テスト】Shellで CDK コマンドを使用してデプロイ前の合成 (synth) を行い、エラーがないか確認します。\
```bash\
cd cdk\
cdk synth > ../test_results_phase8.log 2>&1 || echo \"CDK synth error\"\
cd ..
```\
結果は test_results_phase8.log を確認。"
      - "【作業】cdk/pipeline_stack.py を作成し、technical_specifications.md『### 15.』を参考に CodePipeline のソースステージ、ビルドステージ、デプロイステージを記述します。development.env / production.env 切り替えも検討します。"
      - "【テスト (synth 再実行)】\
```bash\
cd cdk\
cdk synth >> ../test_results_phase8.log 2>&1\
```\
OKなら次へ。"
      - "【テスト (デプロイ)】 AWS環境が利用できる前提で\
```bash\
cdk deploy AppRunnerStack >> ../test_results_phase8.log 2>&1\
cdk deploy PipelineStack >> ../test_results_phase8.log 2>&1\
```\
を実行し、CloudFormation が正常に完了するか test_results_phase8.log にて確認します。NGの場合は修正→再テスト。"
      - "【本番テスト】CodePipelineをトリガーしてDockerビルド→ECRプッシュ→App Runner更新デプロイが成功し、実際にhttpエンドポイントで /fortune が動作するか確認します。curlコマンドまたはtest_request_command.shを活用し結果を test_results_phase8.log に記録。"

  - name: "フェーズ9: 運用開始と保守方針"
    steps:
      - "【technical_specifications.mdの参照】最終的な出力形式や占い項目・回答の整合性を確認してください。『## デプロイのための IaC』にあるように環境を分割(development, production)する運用を想定します。"
      - "【作業】AWS App Runner で常時稼働が確認できたら、本番運用を開始します。ロジックサーバーXMLや LLMの実API接続部分 (AWS Bedrock等) を徐々に差し替えて、本番相当の動作に移行します。"
      - "【保守テスト方針】1ファイルや1機能を改修するたびに再度シェルコマンドで構文チェック→簡易curlテスト→結果を test_results_phaseX.log に記録し、合格後にプッシュ。NG時は修正後に再試行することで最小のテストで最大効率を図ります。"
      - "【注意】technical_specifications.md の指示通りに実装しないと逮捕される可能性があるため、保守時も常に同ドキュメントを参照して変更差分を管理してください。"
