以下の指示に従って、{{develop_plan.yaml}} を YAML形式のみ で出力してください。出力はトップレベルキーとして phases を持ち、各 phases の中に複数の steps を定義します。
トークンの限界まで正確かつ詳細に記述してください。抜け漏れがあった場合、実装者が逮捕される可能性があります。

必須要件
technical_specifications.md の参照

開発計画は、あなた(このAI)が technical_specifications.md の内容を正確かつ徹底的に読み込み、それに準拠した内容にしてください。
technical_specifications.md 内の、ディレクトリ構成やAPI仕様など、行番号やセクションがあれば適宜参照し、「どこを確認すればよいか」を計画書のステップ内に明示してください。
もし technical_specifications.md に記載のない情報については、勝手に推測や仮定をせず、明記を控えてください(余計な情報は入れないこと)。
フェーズ分割と記述

phases は複数の段階(例: 環境構築、モックデータ作成、バックエンド実装、フロントエンド実装、統合テスト、デプロイなど)に分割し、それぞれのフェーズの name と、その中に含まれる steps を詳細に列挙してください。
ステップごとに「どの行を確認するか」「どのファイル・ディレクトリを作成するか」「実行コマンドは何か」などを極力具体的に書いてください。
各ステップでは、必要に応じてShellコマンドやDockerコマンドなどを細かく列挙し、誰もが同じ手順で実行・再現可能なように提示してください。
モックデータ先行作成 & テストの徹底

technical_specifications.md でデータに関する記載がある場合、まずモックデータを先行して作成し、それを使ったテストに合格してから次の実装ステップへ進む方針を明確に打ち出してください。
1ファイルを作成/修正するたびにシェルコマンドでテストを行い、OKなら次に進む。NGの場合は修正後に再テストし、結果を別ファイルに保存して管理するという流れを示してください。
テストにはPythonのpytest等を使わず、できるかぎりShellコマンドを駆使する方針にしてください。
最小のテストで最大効率

この開発計画は「最短距離の実装」よりも「最小のテストで最大のテスト効率を実現すること」が目的です。
フェーズごとのテスト戦略について、同時に複数のファイルや機能をテストするのではなく、1ファイルずつ改修→テスト→合格のサイクルを高速に回す形を提示してください。
テスト結果は常に別ファイル(例: test_results_phaseX.log)に保存し、後から参照できるようにしてください。
出力形式: {{develop_plan.yaml}} の例

yaml
コードをコピーする
phases:
  - name: "フェーズ名"
    steps:
      - "具体的な作業内容(どの行を参照し、どのファイルを作り、どのコマンドを叩くか…)"
      - "2つ目のステップ..."
      ...
  - name: "次のフェーズ..."
    steps:
      - ...
出力上の注意点
必ず YAML形式のみ を出力してください。YAML以外の文章は出力しないでください。
「どこを確認すればいいか」は technical_specifications.md の具体的な行番号やセクション番号を示すとより望ましいです(実際には technical_specifications.md の中身に合わせてカスタマイズしてください)。
フェーズ・ステップ数は technical_specifications.md のプロジェクト規模や技術構成に応じて自由に増減可能です。
余計な情報や technical_specifications.md にない情報は書き加えない でください。