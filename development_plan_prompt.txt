以下の指示に従って、{{develop_plan.yaml}} を YAML形式のみ で出力してください。出力はトップレベルキーとして phases を持ち、各 phases の中に複数の steps を定義します。
トークンの限界まで正確かつ詳細に記述してください。抜け漏れがあった場合、実装者が逮捕される可能性があります。

必須要件
technical_specifications.md の参照

【今回の注意点1: 仮想環境必須】
開発環境は必ず仮想環境 (例: Python venv) を構築してから進めてください。勝手にグローバル(ローカル)環境にはインストールしないようにしてください。仮想環境に入るまでのステップを明確に書いてください。

【今回の注意点2: モックだけで終了しないこと】
モックデータやモック実装でテストする段階は必要ですが、**必ず最終的に本番稼働できるロジックの実装** まで行ってください。途中のフェーズでモックを活用する箇所は構いませんが、「実際にロジックサーバーとの接続を行い、LLM等の本番リソースと連携し、本番データを返せる状態を完成させる」ところまで網羅してください。

【フェーズ分割と記述】
- phases は複数の段階(例: 仮想環境のセットアップ、環境構築、モックデータ作成、バックエンド実装、統合テスト、デプロイなど)に分割し、それぞれのフェーズの name と、その中に含まれる steps を詳細に列挙してください。
- ステップごとに「どの行を確認するか」「どのファイル・ディレクトリを作成するか」「実行コマンドは何か」などを極力具体的に書いてください。
- 各ステップでは、必要に応じてShellコマンドやDockerコマンドなどを細かく列挙し、誰もが同じ手順で実行・再現可能なように提示してください。

【モックデータ先行作成 & テスト】  
technical_specifications.md でデータに関する記載がある場合、まずモックデータを先行して作成し、それを使ったテストに合格してから次の実装ステップへ進む方針は継続してください。ただし、最終的に本番でも機能するような実装を完了させる計画としてください。

【1ファイルずつ改修→テスト→合格のサイクル】  
1ファイルを作成/修正するたびにシェルコマンドでテストを行い、OKなら次に進む。NGの場合は修正後に再テストし、結果を別ファイルに保存して管理するフローを示してください。テストにはPythonのpytest等を使わず、できるかぎりShellコマンドを駆使する方針とします。

【最小のテストで最大効率】  
計画は「最短距離の実装」ではなく「最小のテストで最大のテスト効率を実現する」ことが目的です。ただし、最終的には**本番利用できる完成度**をゴールとします。

【出力形式: {{develop_plan.yaml}} の例】
``yaml
phases:
  - name: "フェーズ名"
    steps:
      - "具体的な作業内容..."
      - ...
  - name: "次のフェーズ..."
    steps:
      - ...
``

【出力上の注意点】
- 必ず YAML形式のみ を出力してください。YAML以外の文章(説明文や前後のコメント)は出力しないでください。
- 「どこを確認すればいいか」は technical_specifications.md の具体的な行番号やセクション番号を示すとより望ましいです(実際には technical_specifications.md の中身に合わせてカスタマイズ)。
- フェーズ・ステップ数は technical_specifications.md のプロジェクト規模や技術構成に応じて自由に増減可能です。
- 余計な情報や technical_specifications.md にない情報は書き加えない でください。
- **仮想環境の構築とアクティベート**, **モックデータのテスト→本実装**, **最終的に本番で動くコードの完成** まで完全に網羅した計画を出力してください。
